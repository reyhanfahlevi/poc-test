// Code generated by MockGen. DO NOT EDIT.
// Source: ../svc/product/internal/usecase/usecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/reyhanfahlevi/poc-test/svc/product/internal/entity"
)

// MockrepoInterface is a mock of repoInterface interface.
type MockrepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockrepoInterfaceMockRecorder
}

// MockrepoInterfaceMockRecorder is the mock recorder for MockrepoInterface.
type MockrepoInterfaceMockRecorder struct {
	mock *MockrepoInterface
}

// NewMockrepoInterface creates a new mock instance.
func NewMockrepoInterface(ctrl *gomock.Controller) *MockrepoInterface {
	mock := &MockrepoInterface{ctrl: ctrl}
	mock.recorder = &MockrepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoInterface) EXPECT() *MockrepoInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockrepoInterface) Get(ctx context.Context, param entity.ParamGetProduct) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, param)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockrepoInterfaceMockRecorder) Get(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockrepoInterface)(nil).Get), ctx, param)
}

// GetProductImage mocks base method.
func (m *MockrepoInterface) GetProductImage(ctx context.Context, productID int64) ([]entity.ProductImg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductImage", ctx, productID)
	ret0, _ := ret[0].([]entity.ProductImg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductImage indicates an expected call of GetProductImage.
func (mr *MockrepoInterfaceMockRecorder) GetProductImage(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductImage", reflect.TypeOf((*MockrepoInterface)(nil).GetProductImage), ctx, productID)
}

// Save mocks base method.
func (m *MockrepoInterface) Save(ctx context.Context, data entity.ParamSaveProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockrepoInterfaceMockRecorder) Save(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockrepoInterface)(nil).Save), ctx, data)
}

// UpdateProduct mocks base method.
func (m *MockrepoInterface) UpdateProduct(ctx context.Context, param entity.ParamSaveProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockrepoInterfaceMockRecorder) UpdateProduct(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockrepoInterface)(nil).UpdateProduct), ctx, param)
}

// UpdateProductImage mocks base method.
func (m *MockrepoInterface) UpdateProductImage(ctx context.Context, productID int64, images []entity.ProductImg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductImage", ctx, productID, images)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductImage indicates an expected call of UpdateProductImage.
func (mr *MockrepoInterfaceMockRecorder) UpdateProductImage(ctx, productID, images interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductImage", reflect.TypeOf((*MockrepoInterface)(nil).UpdateProductImage), ctx, productID, images)
}
